[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cgen"
version = "0.4.0"
authors = [
    {name = "CGen Contributors", email = "noreply@example.com"},
]
description = "Intelligent Python-to-C code generation with three-layer architecture"
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Compilers",
]
keywords = ["c", "code-generation", "python-to-c", "compiler", "metaprogramming"]
dependencies = [
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "mypy>=1.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
]
intelligence = [
    "numpy>=1.21.0",
    "sympy>=1.11.0",
    "z3-solver>=4.12.0",
    "networkx>=2.8.0",
]
ml = [
    "scikit-learn>=1.1.0",
    "pandas>=1.5.0",
    "joblib>=1.2.0",
]
verification = [
    "z3-solver>=4.12.0",
    "sympy>=1.11.0",
    "pysmt>=0.9.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.18.0",
]
all = [
    "cgen[dev,intelligence,ml,verification,docs]",
]

[project.urls]
Homepage = "https://github.com/example/cgen"
Documentation = "https://cgen.readthedocs.io"
Repository = "https://github.com/example/cgen"
"Bug Tracker" = "https://github.com/example/cgen/issues"

[project.scripts]
cgen = "cgen.cli.main:main"
py2c = "cgen.cli.py2c:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "py2c: marks tests for Python-to-C conversion",
    "intelligence: marks tests for intelligence layer",
]

[tool.coverage.run]
source = ["src/cgen"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 120
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
    "D107",  # Missing docstring in __init__
    "D200",  # One-line docstring should fit on one line
    "D205",  # 1 blank line required between summary line and description
    "D400",  # First line should end with a period
    "D401",  # First line should be in imperative mood
]
per-file-ignores = [
    "tests/*:D101,D102,D103,D104,E402",
    "__init__.py:F401",
]
docstring-convention = "google"

[tool.setuptools.package-data]
cgen = ["py.typed"]
